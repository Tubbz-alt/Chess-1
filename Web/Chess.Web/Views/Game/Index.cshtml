@{
    this.ViewData["Title"] = "Game Room";
}

<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/chessboard-1.0.0.min.js"></script>

<link rel="stylesheet" href="~/css/chessboard-1.0.0.min.css">

<main id="main" class="container-fluid text-center">
    <div class="row">
        <div class="column left">
            <div id="whiteStats">
                <div class="color">white</div>
                <h1 id="whiteName"></h1>
                <p id="whitePoints"><span id="whitePointsValue">0</span> pts</p>
                <div id="whiteTakenPieces">
                    <div id="blackPawn" class="pieces"><img src="~/img/chesspieces/wikipedia/bP.png" alt="Pawn: " width="33" height="33" /><span id="blackPawnsTaken">0</span></div>
                    <div id="blackKnight" class="pieces"><img src="~/img/chesspieces/wikipedia/bN.png" alt="Knight: " width="33" height="33" /><span id="blackKnightsTaken">0</span></div>
                    <div id="blackBishop" class="pieces"><img src="~/img/chesspieces/wikipedia/bB.png" alt="Bishop: " width="33" height="33" /><span id="blackBishopsTaken">0</span></div>
                    <div id="blackRook" class="pieces"><img src="~/img/chesspieces/wikipedia/bR.png" alt="Rook: " width="33" height="33" /><span id="blackRooksTaken">0</span></div>
                    <div id="blackQueen" class="pieces"><img src="~/img/chesspieces/wikipedia/bQ.png" alt="Queen: " width="33" height="33" /><span id="blackQueensTaken">0</span></div>
                </div>
            </div>
        </div>
        <div class="column middle">
            <div id="boardMain">
                <h6 id="status">STATUS: <span id="statusText"></span><span id="statusCheck"></span> </h6>
                <div id="board"></div>
                <div id="gameOptions">
                    <button type="submit" id="threefoldDraw" class="btn btn-primary">Declare Threefold Draw</button>
                    <button type="submit" id="offerDraw" class="btn btn-primary">Offer Draw</button>
                    <button type="submit" id="resign" class="btn btn-primary">Resign</button>
                </div>
            </div>
        </div>
        <div class="column right">
            <div id="blackStats">
                <div class="color">black</div>
                <h1 id="blackName"></h1>
                <p id="blackPoints"><span id="blackPointsValue">0</span> pts</p>
                <div id="blackTakenPieces">
                    <div id="whitePawn" class="pieces"><img src="~/img/chesspieces/wikipedia/wP.png" alt="Pawn: " width="33" height="33" style="align-content: center" /><span id="whitePawnsTaken">0</span></div>
                    <div id="whiteKnight" class="pieces"><img src="~/img/chesspieces/wikipedia/wN.png" alt="Knight: " width="33" height="33" style="align-content: center" /><span id="whiteKnightsTaken">0</span></div>
                    <div id="whiteBishop" class="pieces"><img src="~/img/chesspieces/wikipedia/wB.png" alt="Bishop: " width="33" height="33" style="align-content: center" /><span id="whiteBishopsTaken">0</span></div>
                    <div id="whiteRook" class="pieces"><img src="~/img/chesspieces/wikipedia/wR.png" alt="Rook: " width="33" height="33" style="align-content: center" /><span id="whiteRooksTaken">0</span></div>
                    <div id="whiteQueen" class="pieces"><img src="~/img/chesspieces/wikipedia/wQ.png" alt="Queen: " width="33" height="33" style="align-content: center" /><span id="whiteQueensTaken">0</span></div>
                </div>
            </div>
        </div>
    </div>

    <div id="findOpponent" class="row m-5">
        <div class="mx-auto my-auto text-center">
            <p id="label" class="row help-block m-3 text-center">Enter your game nickname:</p>
            <div class="form-inline">
                <div class="form-group mr-2" id="usernameGroup">
                    <label class="sr-only control-label" for="username">Username</label>
                    <input type="text" class="form-control" id="username" placeholder="Name" autofocus />
                </div>
                <button type="submit" id="findGame" class="btn btn-primary">Find Game</button>
                <p id="hidden" class="help-block" style="visibility:hidden"></p>
            </div>
        </div>
    </div>
</main>

<script>
    $(function () {
        var connection = new signalR.HubConnectionBuilder().withUrl("/hub").build();
        connection.start();

        let playerId;
        let playerName;
        let playerOneName;
        let playerTwoName;

        let $whiteStats = document.getElementById('whiteStats');
        let $boardMain = document.getElementById('boardMain');
        let $blackStats = document.getElementById('blackStats');

        let $findGame = document.getElementById('findGame');
        let $statusText = document.getElementById('statusText');
        let $statusCheck = document.getElementById('statusCheck');

        $('#findGame').click(function () {
            var name = $('#username').val();
            connection.invoke("FindGame", name);
            $findGame.disabled = true;
        })

        $('#threefoldDraw').click(function () {
            connection.invoke("IsThreefoldDraw");
        })

        $('#resign').click(function () {
            connection.invoke("Resign");
        })

        $('#offerDraw').click(function () {
            var oldText = $statusText.innerText;
            $statusText.innerText = `You requested a draw!`;
            sleep(1500).then(() => {
                $statusText.innerText = oldText;
            })
            connection.invoke("OfferDrawRequest");
        })

        connection.on("PlayerJoined", function (player) {
            playerId = player.id;
        })

        connection.on("WaitingList", function () {
            $('#label').html("Waiting for an opponent!");
        })

        connection.on("Start", function (game) {
            if (game.id != "") {
                document.getElementById('findOpponent').style.display = "none";
                $whiteStats.style.display = "block";
                $boardMain.style.display = "block";
                $blackStats.style.display = "block";

                playerColor = (playerId == game.player1.id) ? game.player1.color : game.player2.color;
                playerName = (playerId == game.player1.id) ? game.player1.name : game.player2.name;
                playerOneName = game.player1.name;
                playerTwoName = game.player2.name;

                document.getElementById('whiteName').innerText = playerOneName;
                document.getElementById('blackName').innerText = playerTwoName;

                updateStatus(game.movingPlayer.name);
            }
        })

        connection.on("ChangeOrientation", function () {
            board.orientation('black');
        })

        connection.on("BoardMove", function (source, target) {
            board.move(`${source}-${target}`);
        })

        connection.on("BoardSnapback", function (fen) {
            board.position(fen);
        })

        connection.on("EnPassantTake", function (pawnPosition, target) {
            board.move(`${target}-${pawnPosition}`, `${pawnPosition}-${target}`);
        })

        connection.on("BoardSetPosition", function (fen) {
            board.position(fen);
        })

        connection.on("InvalidMessage", function () {
            $statusText.innerText = "Invalid Move!";
            $statusText.style.color = "red";
            sleep(1500).then(() => {
                $statusText.innerText = "Your Turn!";
                $statusText.style.color = "green";
            })
        })

        connection.on("CheckOpponent", function () {
            $statusCheck.style.display = "block";
            $statusCheck.innerText = "CHECK!";
        })

        connection.on("CheckSelf", function () {
            $statusText.style.color = "red";
            $statusText.innerText = "King is check!";
            sleep(1500).then(() => {
                $statusText.innerText = "Your Turn!";
                $statusText.style.color = "green";
            })
        })

        connection.on("EmptyCheckStatus", function () {
            $statusCheck.style.display = "none";
        })

        connection.on("DrawOffered", function (player) {
            var isAccepted = confirm(`${player.name} offered draw! Do you accept?`);

            connection.invoke("OfferDrawAnswer", isAccepted);
        })

        connection.on("DrawOfferRejected", function (player) {
            var oldText = $statusText.innerText;
            $statusText.innerText = `Draw offer rejected by ${player.name}!`;
            sleep(1500).then(() => {
                $statusText.innerText = oldText;
            })
        })

        connection.on("UpdateStatus", function (movingPlayerName) {
            updateStatus(movingPlayerName);
        })

        connection.on("GameOver", function (winner, gameOver) {
            var $board = document.getElementById('board');

            $statusText.style.color = "purple";
            $board.style.pointerEvents = "none";

            switch (gameOver) {
                case 1: $statusText.innerText = `CHECKMATE! ${winner.name.toUpperCase()} WON THE GAME!`;
                    break;
                case 2: $statusText.innerText = `THE GAME IS STALEMATE!`;
                    break;
                case 3: $statusText.innerText = `THE GAME IS DRAW!`;
                    break;
                case 4: $statusText.innerText = `DECLARED THREEFOLD REPETITION DRAW BY ${winner.name.toUpperCase()}!`;
                    break;
                case 5: $statusText.innerText = `FIVEFOLD REPETITION DRAW!`;
                    break;
                case 6: $statusText.innerText = `${winner.name.toUpperCase()} RESIGNED!`;
                    break;
            }
        })

        connection.on("UpdateTakenFigures", function (movingPlayer, pieceName, points) {
            if (movingPlayer.name == playerOneName) {
                var $whitePointsValue = document.getElementById('whitePointsValue');
                $whitePointsValue.innerText = points;

                let $blackPawnsTaken = document.getElementById('blackPawnsTaken');
                let $blackKnightsTaken = document.getElementById('blackKnightsTaken');
                let $blackBishopsTaken = document.getElementById('blackBishopsTaken');
                let $blackRooksTaken = document.getElementById('blackRooksTaken');
                let $blackQueensTaken = document.getElementById('blackQueensTaken');

                switch (pieceName) {
                    case "Pawn": $blackPawnsTaken.innerText++;
                        break;
                    case "Knight": $blackKnightsTaken.innerText++;
                        break;
                    case "Bishop": $blackBishopsTaken.innerText++;
                        break;
                    case "Rook": $blackRooksTaken.innerText++;
                        break;
                    case "Queen": $blackQueensTaken.innerText++;
                        break;
                }
            } else {
                var $blackPointsValue = document.getElementById('blackPointsValue');
                $blackPointsValue.innerText = points;
                
                let $whitePawnsTaken = document.getElementById('whitePawnsTaken');
                let $whiteKnightsTaken = document.getElementById('whiteKnightsTaken');
                let $whiteBishopsTaken = document.getElementById('whiteBishopsTaken');
                let $whiteRooksTaken = document.getElementById('whiteRooksTaken');
                let $whiteQueensTaken = document.getElementById('whiteQueensTaken');

                switch (pieceName) {
                    case "Pawn": $whitePawnsTaken.innerText++;
                        break;
                    case "Knight": $whiteKnightsTaken.innerText++;
                        break;
                    case "Bishop": $whiteBishopsTaken.innerText++;
                        break;
                    case "Rook": $whiteRooksTaken.innerText++;
                        break;
                    case "Queen": $whiteQueensTaken.innerText++;
                        break;
                }   
            }
        })

        function updateStatus(name) {
            if (name == playerName) {
                $statusText.innerText = "Your turn!";
                $statusText.style.color = "green";
            } else {
                $statusText.innerText = `${name}'s turn!`;
                $statusText.style.color = "red";
            }
        }

        function sleep(time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }

        function onDrop(source, target, piece, newPos, oldPos) {
            if (target.length === 2) {
                let sourceFen = Chessboard.objToFen(oldPos);
                let targetFen = Chessboard.objToFen(newPos);
                connection.invoke("MoveSelected", source, target, sourceFen, targetFen);
            }
        }

        var config = {
            pieceTheme: 'img/chesspieces/wikipedia/{piece}.png',
            draggable: true,
            dropOffBoard: 'snapback',
            showNotation: true,
            onDrop: onDrop,
            position: 'start'
        }

        var board = ChessBoard('board', config);
    })
</script>
