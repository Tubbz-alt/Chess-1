@using Chess.Data.Models;
@using Chess.Common.Enums;

@{
    this.ViewData["Title"] = "Game Room";
}

<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/chessboard-1.0.0.min.js"></script>

<link rel="stylesheet" href="~/css/chessboard-1.0.0.min.css">

<div id="board"></div>

<main id="main" class="container-fluid text-center">
    <div id="timeView" class="row" style="display: none; margin-top: 15px">
        <h4 id="timeName"></h4>
        <p id="timeStatus"></p>
    </div>

    <div id="findOpponent" class="row m-5">
        <div class="mx-auto my-auto text-center">
            <p id="status" class="row help-block m-3 text-center">Please enter your desired username.</p>
            <div class="form-inline">
                <div class="form-group mr-2" id="usernameGroup">
                    <label class="sr-only control-label" for="username">Username</label>
                    <input type="text" class="form-control" id="username" placeholder="Username" autofocus />
                </div>
                <button type="submit" id="findGame" class="btn btn-primary">Find Game</button>
                <p id="hidden" class="help-block" style="visibility:hidden"></p>
            </div>
        </div>
    </div>
</main>

<script>
    $(function() {
        var connection = new signalR.HubConnectionBuilder().withUrl("/hub").build();
        connection.start();

        var playerId;
        var playerColor;
        var playerName;
        var gameOver;
        var movingPlayer;
        var pieceColor;

        $('#findGame').click(function() {
            var name = $('#username').val();
            connection.invoke("FindGame", name);
            document.getElementById("findGame").disabled = true;
        })

        connection.on("PlayerJoined", function(player) {
            playerId = player.id;
        })

        connection.on("WaitingList", function() {
            $('#status').html("Waiting for an opponent");
        })

        connection.on("Start", function(game) {
            if (game.id != "") {
                document.getElementById('findOpponent').style.display = "none";
                document.getElementById('board').style.display = "block";

                playerColor = (playerId == game.player1.id) ? game.player1.color : game.player2.color;
                playerName = (playerId == game.player1.id) ? game.player1.name : game.player2.name;
                movingPlayer = game.movingPlayer;

                if (playerColor == @((int)Color.Light)) {
                    board.orientation('white');
                } else {
                    board.orientation('black');
                }

                document.getElementById('timeView').style.display = "block";
                document.getElementById('timeName').innerText = "Player Name: " + playerName;

                updateStatus(game.movingPlayer.name);
            }
        })

        connection.on("MoveDone", function (source, target, game) {
            console.log('Legal Move');
            board.move(`${source}-${target}`);
            
            //if (!gameOver) {
            //    updateStatus(game.movingPlayer.userName);
            //}
        })

        connection.on("Illigal Move", function (fen) {
            console.log("Illigal");
            board.position(fen);
        })

        function updateStatus(name) {
            var timeStatus = document.getElementById('timeStatus');
            if (name == playerName) {
                timeStatus.innerText = "It's your turn!";
                timeStatus.style.color = "green";
            } else {
                timeStatus.innerText = name + " has to move!";
                timeStatus.style.color = "red";
            }
        }

        function onDrop(source, target, piece, newPos, oldPos) {
            connection.invoke("MoveSelected", source, target, Chessboard.objToFen(oldPos));
        }

        var config = {
            pieceTheme: 'img/chesspieces/wikipedia/{piece}.png',
            draggable: true,
            dropOffBoard: 'snapback',
            showNotation: true,
            onDrop: onDrop,
            position: 'start'
        }

        var board = ChessBoard('board', config);
    })
</script>
