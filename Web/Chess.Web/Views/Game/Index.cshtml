@{
    this.ViewData["Title"] = "Game Room";
}

<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/chessboard-1.0.0.min.js"></script>

<link rel="stylesheet" href="~/css/chessboard-1.0.0.min.css">

<main id="main" class="container-fluid text-center">
    <div id="statusView" class="row">
        <h6 id="status">STATUS: <span id="statusText"></span></h6>
        <h6 id="statusCheck"></h6>
    </div>
    <div id="board"></div>
    <div id="nameView" class="row">
        <h6 id="name">PLAYER: <span id="nameValue"></span></h6>
    </div>

    <div id="findOpponent" class="row m-5">
        <div class="mx-auto my-auto text-center">
            <p id="label" class="row help-block m-3 text-center">Enter your game nickname:</p>
            <div class="form-inline">
                <div class="form-group mr-2" id="usernameGroup">
                    <label class="sr-only control-label" for="username">Username</label>
                    <input type="text" class="form-control" id="username" placeholder="Name" autofocus />
                </div>
                <button type="submit" id="findGame" class="btn btn-primary">Find Game</button>
                <p id="hidden" class="help-block" style="visibility:hidden"></p>
            </div>
        </div>
    </div>
</main>

<script>
    $(function() {
        var connection = new signalR.HubConnectionBuilder().withUrl("/hub").build();
        connection.start();

        var playerId;
        var playerName;

        $('#findGame').click(function() {
            var name = $('#username').val();
            connection.invoke("FindGame", name);
            document.getElementById("findGame").disabled = true;
        })

        connection.on("PlayerJoined", function (player) {
            playerId = player.id;
        })

        connection.on("WaitingList", function () {
            $('#label').html("Waiting for an opponent!");
        })

        connection.on("Start", function (game) {
            if (game.id != "") {
                document.getElementById('findOpponent').style.display = "none";
                document.getElementById('board').style.display = "block";

                playerColor = (playerId == game.player1.id) ? game.player1.color : game.player2.color;
                playerName = (playerId == game.player1.id) ? game.player1.name : game.player2.name;

                document.getElementById('statusView').style.display = "block";
                document.getElementById('nameView').style.display = "block";
                document.getElementById('nameValue').innerText = playerName;
                document.getElementById('nameValue').style.color = "black";

                updateStatus(game.movingPlayer.name);
            }
        })

        connection.on("ChangeOrientation", function () {
            board.orientation('black');
        })

        connection.on("InvalidMove", function (fen, movingPlayerName) {
            board.position(fen);
            invalidMessage(movingPlayerName);
        })

        connection.on("BoardMove", function (source, target) {
            board.move(`${source}-${target}`);
        })

        connection.on("GameOver", function (winner, gameOver) {
            var $statusText = document.getElementById('statusText');
            var $board = document.getElementById('board');
            
            $statusText.style.color = "purple";
            $board.style.pointerEvents = "none";

            switch (gameOver) {
                case 1: $statusText.innerText = `CHECKMATE! ${winner.name.toUpperCase()} WON THE GAME!`;
                    break;
                case 2: $statusText.innerText = `THE GAME IS STALEMATE!`;
                    break;
                case 3: $statusText.innerText = `THE GAME IS DRAW!`;
                    break;
                case 4: $statusText.innerText = `THE GAME IS DRAW BY REPETITION!`;
                    break;
            }
        })

        connection.on("EnPassantTake", function (pawnPosition, target) {
            board.move(`${target}-${pawnPosition}`, `${pawnPosition}-${target}`);
        })

        connection.on("CheckOpponent", function () {
            var $status = document.getElementById('statusCheck');
            $status.style.display = "block";
            $status.innerText = "Check!";
        })

        connection.on("CheckSelf", function () {
            var $status = document.getElementById('statusCheck');
            $status.style.display = "block";
            $status.innerText = "King is checked!";
        })

        connection.on("EmptyCheckStatus", function () {
            var $status = document.getElementById('statusCheck');
            $status.style.display = "none";
        })

        connection.on("UpdateStatus", function (movingPlayerName) {
            updateStatus(movingPlayerName);
        })

        function invalidMessage(name) {
            var statusText = document.getElementById('statusText');

            if (name == playerName) {
                statusText.innerText = "Invalid Move!";
                statusText.style.color = "red";
                sleep(1500).then(() => {
                    statusText.innerText = "Your Turn!";
                    statusText.style.color = "green";
                })
            }
            else {
                statusText.innerText = "Not your turn!";
                statusText.style.color = "red";
                sleep(1500).then(() => {
                    statusText.innerText = `${name}'s turn!`;
                    statusText.style.color = "red";
                })
            }
        }

        function updateStatus(name) {
            var statusText = document.getElementById('statusText');
            if (name == playerName) {
                statusText.innerText = "Your turn!";
                statusText.style.color = "green";
            } else {
                statusText.innerText = `${name}'s turn!`;
                statusText.style.color = "red";
            }
        }

        function sleep (time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }

        function onDrop(source, target, piece, newPos, oldPos) {
            if (target.length === 2) {
                let sourceFen = Chessboard.objToFen(oldPos);
                connection.invoke("MoveSelected", source, target, sourceFen);
            }
        }

        var config = {
            pieceTheme: 'img/chesspieces/wikipedia/{piece}.png',
            draggable: true,
            dropOffBoard: 'snapback',
            showNotation: true,
            onDrop: onDrop,
            position: 'start'
        }

        var board = ChessBoard('board', config);
    })
</script>
